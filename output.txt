[{'Code': 'Foundational Knowledge (FOUN)', 'Definition': 'Basic principles and theories that form the core of the engineering discipline', 'Examples': [{'id': 1, 'text': 'The principle of abstraction is a fundamental concept in software design, enabling developers to manage complexity by breaking down systems into manageable components. By focusing on essential features while ignoring irrelevant details, abstraction allows for the creation of reusable modules and enhances code maintainability. For instance, the implementation of data structures such as stacks or queues involves abstracting away specific storage mechanisms, ensuring that operations like push, pop, and peek are uniformly supported.'}, {'id': 2, 'text': 'Algorithms form the backbone of software design by providing efficient solutions to computational problems. The divide-and-conquer strategy is a powerful technique where a problem is recursively broken down into smaller sub-problems until they become trivial to solve. Merge sort, for example, demonstrates this principle by dividing an array in half repeatedly and merging sorted halves back together, achieving optimal performance with a time complexity of O(n log n).'}, {'id': 3, 'text': 'In software design, modularity is essential for creating maintainable and scalable systems. Each module should be designed to perform a single well-defined function, thereby promoting cohesion within the system while reducing coupling between components. This approach facilitates easier testing and updating of individual parts without disrupting other elements, aligning with the broader goal of systematic software development.'}]}, [...]]